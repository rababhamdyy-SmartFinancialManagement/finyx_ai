# -*- coding: utf-8 -*-
"""financial_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fo1_SUmbZ6otr7wb20ZJJK_WmnVQPGIb
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install unsloth
# # Also get the latest nightly Unsloth!
# !pip uninstall unsloth -y && pip install --upgrade --no-cache-dir --no-deps git+https://github.com/unslothai/unsloth.git

from unsloth import FastLanguageModel
import torch
max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.

# 4bit pre quantized models we support for 4x faster downloading + no OOMs.
fourbit_models = [
    "unsloth/Meta-Llama-3.1-8B-bnb-4bit",      # Llama-3.1 15 trillion tokens model 2x faster!
    "unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit",
    "unsloth/Meta-Llama-3.1-70B-bnb-4bit",
    "unsloth/Meta-Llama-3.1-405B-bnb-4bit",    # We also uploaded 4bit for 405b!
    "unsloth/Mistral-Nemo-Base-2407-bnb-4bit", # New Mistral 12b 2x faster!
    "unsloth/Mistral-Nemo-Instruct-2407-bnb-4bit",
    "unsloth/mistral-7b-v0.3-bnb-4bit",        # Mistral v3 2x faster!
    "unsloth/mistral-7b-instruct-v0.3-bnb-4bit",
    "unsloth/Phi-3.5-mini-instruct",           # Phi-3.5 2x faster!
    "unsloth/Phi-3-medium-4k-instruct",
    "unsloth/gemma-2-9b-bnb-4bit",
    "unsloth/gemma-2-27b-bnb-4bit",            # Gemma 2x faster!
] # More models at https://huggingface.co/unsloth

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Meta-Llama-3.1-8B-Instruct",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

"""We now add LoRA adapters so we only need to update 1 to 10% of all parameters!"""

model = FastLanguageModel.get_peft_model(
    model,
    r = 32, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

"""<a name="Data"></a>
### Data Prep
We now use the `Llama-3.1` format for conversation style finetunes. We use [Maxime Labonne's FineTome-100k](https://huggingface.co/datasets/mlabonne/FineTome-100k) dataset in ShareGPT style. But we convert it to HuggingFace's normal multiturn format `("role", "content")` instead of `("from", "value")`/ Llama-3 renders multi turn conversations like below:

```
<|begin_of_text|><|start_header_id|>user<|end_header_id|>

Hello!<|eot_id|><|start_header_id|>assistant<|end_header_id|>

Hey there! How are you?<|eot_id|><|start_header_id|>user<|end_header_id|>

I'm great thanks!<|eot_id|>
```

We use our `get_chat_template` function to get the correct chat template. We support `zephyr, chatml, mistral, llama, alpaca, vicuna, vicuna_old, phi3, llama3` and more.
"""

from unsloth.chat_templates import get_chat_template

tokenizer = get_chat_template(
    tokenizer,
    chat_template = "llama-3.1",
)

from datasets import Dataset
import json

# Load your business financial JSONL file
data = []
with open('business_dataset.jsonl', 'r') as f:
    for line in f:
        data.append(json.loads(line))

# Create a function that works with business financial examples
def format_business_example(item):
    # Prepare a conversation format with the business financial data
    convo = [
        {'role': 'user', 'content': item['business_financial_summary']},
        {'role': 'assistant', 'content': (
            f"Profitability Analysis: {item['profitability_analysis']}\n\n"
            f"Cash Flow Recommendations: {item['cash_flow_recommendations']}\n\n"
            f"Expense Optimization Strategies:\n{format_expense_optimization(item['expense_optimization'])}\n\n"
            f"Investment Opportunities: {item['investment_opportunities']}\n\n"
            f"Risk Assessment: {item['risk_assessment']}"
        )}
    ]

    # Apply tokenizer template to create formatted text
    formatted_text = tokenizer.apply_chat_template(
        convo,
        tokenize=False,
        add_generation_prompt=False
    )

    return {'text': formatted_text, 'conversations': convo}

# Helper function to format the expense optimization (handles both dict and string)
def format_expense_optimization(expense_data):
    # Check if expense_optimization is a string or a dictionary
    if isinstance(expense_data, str):
        # If it's already a string, return it directly
        return expense_data
    elif isinstance(expense_data, dict):
        # If it's a dictionary, format it nicely
        formatted_text = ""
        for category, recommendation in expense_data.items():
            formatted_text += f"- {category}: {recommendation}\n"
        return formatted_text
    else:
        # Fallback for any other data type
        return str(expense_data)

# Process all business financial examples
formatted_business_data = [format_business_example(item) for item in data]

# Create dataset with both text and conversations
train_data = Dataset.from_list(formatted_business_data)

# Alternatively, if you only want the 'text' field:
# business_train_data = Dataset.from_dict({'text': [x['text'] for x in formatted_business_data]})

# Preview the first example to verify formatting
print("Sample formatted business financial data:")
print(formatted_business_data[0]['text'][:500] + "...")  # Print first 500 chars

# Save the processed dataset if needed
# business_train_data.save_to_disk("processed_business_financial_dataset")

"""We look at how the conversations are structured for item 5:

And we see how the chat template transformed these conversations.

**[Notice]** Llama 3.1 Instruct's default chat template default adds `"Cutting Knowledge Date: December 2023\nToday Date: 26 July 2024"`, so do not be alarmed!
"""

train_data[5]["conversations"]

train_data[5]["text"]

"""<a name="Train"></a>
### Train the model
Now let's use Huggingface TRL's `SFTTrainer`! More docs here: [TRL SFT docs](https://huggingface.co/docs/trl/sft_trainer). We do 60 steps to speed things up, but you can set `num_train_epochs=1` for a full run, and turn off `max_steps=None`. We also support TRL's `DPOTrainer`!
"""

from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported
from datasets import Dataset

# Convert the train_data list to a Hugging Face Dataset
train_data = Dataset.from_list(train_data)

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = train_data,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        # num_train_epochs = 1, # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "cosine",
        seed = 3407,
        output_dir = "outputs",
        report_to = "wandb", # Use this for WandB etc
    ),
)

"""We also use Unsloth's `train_on_completions` method to only train on the assistant outputs and ignore the loss on the user's inputs."""

from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part = "<|start_header_id|>user<|end_header_id|>\n\n",
    response_part = "<|start_header_id|>assistant<|end_header_id|>\n\n",
)

"""We verify masking is actually done:"""

tokenizer.decode(trainer.train_dataset[5]["input_ids"])

space = tokenizer(" ", add_special_tokens = False).input_ids[0]
tokenizer.decode([space if x == -100 else x for x in trainer.train_dataset[5]["labels"]])

"""We can see the System and Instruction prompts are successfully masked!"""

#@title Show current memory stats
gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

trainer_stats = trainer.train()

"""<a name="Inference"></a>
### Inference
Let's run the model! You can change the instruction and input - leave the output blank!

**[NEW] Try 2x faster inference in a free Colab for Llama-3.1 8b Instruct [here](https://colab.research.google.com/drive/1T-YBVfnphoVc8E2E854qF3jdia2Ll2W2?usp=sharing)**

We use `min_p = 0.1` and `temperature = 1.5`. Read this [Tweet](https://x.com/menhguin/status/1826132708508213629) for more information on why.
"""

from unsloth.chat_templates import get_chat_template

tokenizer = get_chat_template(
    tokenizer,
    chat_template = "llama-3.1",
)
FastLanguageModel.for_inference(model) # Enable native 2x faster inference

messages = [
    {"role": "user", "content": """
{'Date': '2018-05-01',
 'Month': 5,
 'Year': 2018,
 'Total_Revenue': 526352.11,
 'Employee_Salaries': 165851.51,
 'Loan_Payment': 23506.69,
 'Raw_Materials': 94326.72,
 'Utilities': 9173.98,
 'Rent': 17038.7,
 'Marketing': 29864.6,
 'Insurance': 15844.99,
 'Office_Supplies': 4422.06,
 'Maintenance': 8500.11,
 'Taxes': 51556.86,
 'Transfer_Money': 35452.41,
 'Profits': 106265.88999999996}
    """},
]
inputs = tokenizer.apply_chat_template(
    messages,
    tokenize = True,
    add_generation_prompt = True, # Must add for generation
    return_tensors = "pt",
).to("cuda")

outputs = model.generate(input_ids = inputs, max_new_tokens = 1024, use_cache = True,
                         temperature = 1.5, min_p = 0.1)
tokenizer.batch_decode(outputs)

""" You can also use a `TextStreamer` for continuous inference - so you can see the generation token by token, instead of waiting the whole time!"""

FastLanguageModel.for_inference(model) # Enable native 2x faster inference

messages = [
    {"role": "user", "content": """
{'Date': '2018-05-01',
 'Month': 5,
 'Year': 2018,
 'Total_Revenue': 526352.11,
 'Employee_Salaries': 165851.51,
 'Loan_Payment': 23506.69,
 'Raw_Materials': 94326.72,
 'Utilities': 9173.98,
 'Rent': 17038.7,
 'Marketing': 29864.6,
 'Insurance': 15844.99,
 'Office_Supplies': 4422.06,
 'Maintenance': 8500.11,
 'Taxes': 51556.86,
 'Transfer_Money': 35452.41,
 'Profits': 106265.88999999996}
    """},
]
inputs = tokenizer.apply_chat_template(
    messages,
    tokenize = True,
    add_generation_prompt = True, # Must add for generation
    return_tensors = "pt",
).to("cuda")

from transformers import TextStreamer
text_streamer = TextStreamer(tokenizer, skip_prompt = True)
_ = model.generate(input_ids = inputs, streamer = text_streamer, max_new_tokens = 3000,
                   use_cache = True, temperature = 1.5, min_p = 0.1)

"""<a name="Save"></a>
### Saving, loading finetuned models
To save the final model as LoRA adapters, either use Huggingface's `push_to_hub` for an online save or `save_pretrained` for a local save.

**[NOTE]** This ONLY saves the LoRA adapters, and not the full model. To save to 16bit or GGUF, scroll down!
"""

model.save_pretrained("business_financial_model") # Local saving
tokenizer.save_pretrained("business_financial_model")
# model.push_to_hub("your_name/lora_model", token = "...") # Online saving
# tokenizer.push_to_hub("your_name/lora_model", token = "...") # Online saving

!pip install "vllm>=0.4.0" huggingface_hub

!vllm serve \
  --model unsloth/Meta-Llama-3.1-8B-Instruct \
  --quantization awq \  # 4-bit quantization (faster + cheaper)
  --enable-lora \
  --lora-modules my-lora=./path-to-your-lora-adapter \  # Local path or HF Hub ID
  --max-lora-rank 64 \
  --host 0.0.0.0 --port 8000

model_name = "unsloth/Meta-Llama-3.1-8B-Instruct"
ter_model_id = "personal_financial_model"
business_model_id = "business_financial_model"

!nohup vllm serve $model_name \
  --dtype half \
  --gpu-memory-utilization 0.8 \
  --max-lora-rank 64 \
  --enable-lora \
  --lora-modules personal-lora=$ter_model_id business-lora=$business_model_id \
  > vllm.log 2>&1 &

!tail -n 30 nohup.out

from huggingface_hub import login
login(token="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")
model.push_to_hub("sayed-zaki-122/business_financial_model") # Online saving
tokenizer.push_to_hub("sayed-zaki-122/business_financial_model")

"""Now if you want to load the LoRA adapters we just saved for inference, set `False` to `True`:"""

if True:
    from unsloth import FastLanguageModel
    model, tokenizer = FastLanguageModel.from_pretrained(
        model_name = "personal_financial_model", # YOUR MODEL YOU USED FOR TRAINING
        max_seq_length = max_seq_length,
        dtype = dtype,
        load_in_4bit = load_in_4bit,
    )
    FastLanguageModel.for_inference(model) # Enable native 2x faster inference

messages = [
    {"role": "user", "content": """
    {'Income': 3271.32,
 'Electricity': 68.8,
 'Gas': 44.46,
 'Internet': 63.46,
 'Water': 43.37,
 'Food': 387.04,
 'Groceries': 304.22,
 'Rent': 861.92,
 'Transportation': 159.58,
 'Healthcare': 99.91,
 'Shopping': 173.13,
 'Entertainment': 102.72,
 'Dining Out': 153.67,
 'Subscription Services': 31.06,
 'Clothing': 95.52,
 'Electronics': 52.21,
 'Zakat': 222.91,
 'Investment': 359.92,
 'Emergency Fund': 229.5,
 'Retirement': 415.64,
 'Education': 149.66,
 'Travel': 305.61,
 'Gifts': 52.39,
 'Home Maintenance': 118.51,
 'Others': 89.79}
    """},
]
inputs = tokenizer.apply_chat_template(
    messages,
    tokenize = True,
    add_generation_prompt = True, # Must add for generation
    return_tensors = "pt",
).to("cuda")

from transformers import TextStreamer
text_streamer = TextStreamer(tokenizer, skip_prompt = True)
_ = model.generate(input_ids = inputs, streamer = text_streamer, max_new_tokens = 1024,
                   use_cache = True, temperature = 1.5, min_p = 0.1)

"""You can also use Hugging Face's `AutoModelForPeftCausalLM`. Only use this if you do not have `unsloth` installed. It can be hopelessly slow, since `4bit` model downloading is not supported, and Unsloth's **inference is 2x faster**."""

if True:
    # I highly do NOT suggest - use Unsloth if possible
    from peft import AutoPeftModelForCausalLM
    from transformers import AutoTokenizer
    model = AutoPeftModelForCausalLM.from_pretrained(
        "personal_financial_model", # YOUR MODEL YOU USED FOR TRAINING
        load_in_4bit = load_in_4bit,
    )
    tokenizer = AutoTokenizer.from_pretrained("personal_financial_model")

"""### Saving to float16 for VLLM

We also support saving to `float16` directly. Select `merged_16bit` for float16 or `merged_4bit` for int4. We also allow `lora` adapters as a fallback. Use `push_to_hub_merged` to upload to your Hugging Face account! You can go to https://huggingface.co/settings/tokens for your personal tokens.
"""

# Merge to 16bit
# if True: model.save_pretrained("model", safe_serialization=True)
if True: model.push_to_hub_merged("hf/model", tokenizer, save_method = "merged_16bit", token = "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")

# Merge to 4bit
if False: model.save_pretrained_merged("model", tokenizer, save_method = "merged_4bit",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "merged_4bit", token = "")

# Just LoRA adapters
if False: model.save_pretrained_merged("model", tokenizer, save_method = "lora",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "lora", token = "")

"""### GGUF / llama.cpp Conversion
To save to `GGUF` / `llama.cpp`, we support it natively now! We clone `llama.cpp` and we default save it to `q8_0`. We allow all methods like `q4_k_m`. Use `save_pretrained_gguf` for local saving and `push_to_hub_gguf` for uploading to HF.

Some supported quant methods (full list on our [Wiki page](https://github.com/unslothai/unsloth/wiki#gguf-quantization-options)):
* `q8_0` - Fast conversion. High resource use, but generally acceptable.
* `q4_k_m` - Recommended. Uses Q6_K for half of the attention.wv and feed_forward.w2 tensors, else Q4_K.
* `q5_k_m` - Recommended. Uses Q6_K for half of the attention.wv and feed_forward.w2 tensors, else Q5_K.

[**NEW**] To finetune and auto export to Ollama, try our [Ollama notebook](https://colab.research.google.com/drive/1WZDi7APtQ9VsvOrQSSC5DDtxq159j8iZ?usp=sharing)
"""



# Save to 8bit Q8_0
if False: model.save_pretrained_gguf("model", tokenizer,)
# Remember to go to https://huggingface.co/settings/tokens for a token!
# And change hf to your username!
if False: model.push_to_hub_gguf("hf/model", tokenizer, token = "")

# Save to 16bit GGUF
if False: model.save_pretrained_gguf("model", tokenizer, quantization_method = "f16")
if False: model.push_to_hub_gguf("hf/model", tokenizer, quantization_method = "f16", token = "")

# Save to q4_k_m GGUF
if False: model.save_pretrained_gguf("model", tokenizer, quantization_method = "q4_k_m")
if False: model.push_to_hub_gguf("hf/model", tokenizer, quantization_method = "q4_k_m", token = "")

# Save to multiple GGUF options - much faster if you want multiple!
if False:
    model.push_to_hub_gguf(
        "hf/model", # Change hf to your username!
        tokenizer,
        quantization_method = ["q4_k_m", "q8_0", "q5_k_m",],
        token = "", # Get a token at https://huggingface.co/settings/tokens
    )

"""Now, use the `model-unsloth.gguf` file or `model-unsloth-Q4_K_M.gguf` file in `llama.cpp` or a UI based system like `GPT4All`. You can install GPT4All by going [here](https://gpt4all.io/index.html).

**[NEW] Try 2x faster inference in a free Colab for Llama-3.1 8b Instruct [here](https://colab.research.google.com/drive/1T-YBVfnphoVc8E2E854qF3jdia2Ll2W2?usp=sharing)**
"""

!vllm serve unsloth/Meta-Llama-3.1-8B-Instruct --enable-lora --lora-modules business-lora=sayed-zaki-122/business_financial_model personal-lora=sayed-zaki-122/personal_financial_model --max-lora-rank 64 --host 0.0.0.0 --port 8000 --gpu-memory-utilization 0.6  # Lower due to higher memory usage

!pip show vllm

!nvidia-smi

from peft import PeftModel
from transformers import AutoModelForCausalLM

# base_model = AutoModelForCausalLM.from_pretrained("unsloth/Meta-Llama-3.1-8B-Instruct", device_map="auto")
model = PeftModel.from_pretrained(base_model, "personal_financial_model")

model.save_pretrained("final_personal_financial")  # This will save it in the format vLLM expects

base_model_id = "unsloth/Meta-Llama-3.1-8B-Instruct"
adapter1_path = "business_financial_model"
adapter2_path = "personal_financial_model"

!nohup vllm serve "$base_model_id" --dtype=half --gpu-memory-utilization 0.8 --max_lora_rank 64 --enable-lora --lora-modules adapter1=$adapter1_path adapter2=$adapter2_path &

!tail -n 30 nohup.out

model.save_pretrained_merged("merged_model")
model.save_pretrained_lora("lora_adapter_folder")
